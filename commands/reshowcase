#!/usr/bin/env node

const webpack = require("webpack");
const WebpackDevServer = require("webpack-dev-server");
const fs = require("fs");
const path = require("path");
const os = require("os");
const HtmlWebpackPlugin = require("html-webpack-plugin");
const CopyWebpackPlugin = require("copy-webpack-plugin");
const child_process = require("child_process");

const toAbsolutePath = (filepath) => {
  if (path.isAbsolute(filepath)) {
    return filepath;
  } else {
    return path.join(process.cwd(), filepath);
  }
};

const getRequiredPathValue = (name) => {
  const prefix = `--${name}=`;
  const arg = process.argv.find((item) => item.startsWith(prefix));
  if (arg === undefined) {
    console.error(`Please pass ${name} path: ${prefix}...`);
    process.exit(1);
  } else {
    const value = arg.replace(prefix, "");
    if (value === "") {
      console.error(`${name} path can't be empty`);
      process.exit(1);
    } else {
      return toAbsolutePath(value);
    }
  }
};

const task = process.argv[2];

if (task !== "build" && task !== "start") {
  console.error(
    "You need to pass 'start' or 'build' command and path to the entry point.\nFor example: reshowcase start --entry=./example/Demo.bs.js"
  );
  process.exit(1);
}

// Servers can handle paths to HTML files differently.
// Allow using full path to HTML template in "src" attribute of iframe in case of possible issues.
const useFullframeUrl = (() => {
  const prefix = `--full-iframe-url=`;
  const arg = process.argv.find((item) => item.startsWith(prefix));
  if (arg === undefined) {
    return false;
  } else {
    const value = arg.replace(prefix, "");
    if (value === "true") {
      return true;
    } else {
      return false;
    }
  }
})();

const isBuild = task === "build";

const entryPath = getRequiredPathValue("entry");

if (!fs.existsSync(entryPath)) {
  console.error(`Entry file not found here: ${entryPath}`);
  process.exit(1);
}

const outputPath = (() => {
  if (isBuild) {
    return getRequiredPathValue("output");
  } else {
    return os.tmpdir();
  }
})();

const config = (() => {
  const configDir = path.join(process.cwd(), ".reshowcase");

  if (!fs.existsSync(configDir)) {
    return {};
  } else {
    const configFilenames = fs.readdirSync(configDir);
    const configFilename = configFilenames.find(
      (filename) => filename === "config.cjs" || filename === "config.js"
    );
    if (configFilename === undefined) {
      return {};
    } else {
      try {
        const pathToConfig = path.join(configDir, configFilename);
        const config_ = require(pathToConfig);
        return config_;
      } catch (error) {
        console.error("Failed to read config:", error);
        return {};
      }
    }
  }
})();

const compiler = webpack({
  // https://github.com/webpack/webpack-dev-server/issues/2758#issuecomment-813135032
  // target: "web" (probably) can be removed after upgrading to webpack-dev-server v4
  target: "web",
  mode: isBuild ? "production" : "development",
  entry: {
    index: entryPath,
  },
  output: {
    path: outputPath,
    filename: "reshowcase[fullhash].js",
    globalObject: "this",
    chunkLoadingGlobal: "reshowcase__d",
  },
  module: config.module,
  plugins: [
    ...(config.plugins ? config.plugins : []),
    new CopyWebpackPlugin({
      patterns: [{ from: path.join(__dirname, "../src/favicon.png"), to: "" }],
    }),
    new HtmlWebpackPlugin({
      filename: "index.html",
      template: path.join(__dirname, "../src/ui-template.html"),
    }),
    new HtmlWebpackPlugin({
      filename: "./demo/index.html",
      template: process.argv.find((item) => item.startsWith("--template="))
        ? path.join(
            process.cwd(),
            process.argv
              .find((item) => item.startsWith("--template="))
              .replace(/--template=/, "")
          )
        : path.join(__dirname, "../src/demo-template.html"),
    }),
    new webpack.DefinePlugin({
      USE_FULL_IFRAME_URL: JSON.stringify(useFullframeUrl),
    }),
  ],
});

if (isBuild) {
  console.log("Building reshowcase bundle...");
  compiler.run((err, _result) => {
    if (err) {
      console.error(err);
    } else {
      console.log("Build finished.");
    }
  });
} else {
  const port = parseInt(
    process.argv.find((item) => item.startsWith("--port="))
      ? process.argv
          .find((item) => item.startsWith("--port="))
          .replace(/--port=/, "")
      : 9000,
    10
  );

  const server = new WebpackDevServer(compiler, {
    compress: true,
    port: port,
    publicPath: "/",
    historyApiFallback: {
      index: "/index.html",
    },
    stats: "errors-only",
    ...(config.devServer || {}),
  });

  ["SIGINT", "SIGTERM"].forEach((signal) => {
    process.on(signal, () => {
      if (server) {
        server.close(() => {
          process.exit();
        });
      } else {
        process.exit();
      }
    });
  });

  if (config.devServer && config.devServer.socket) {
    server.listen(config.devServer.socket);
  } else {
    server.listen(port, "0.0.0.0");
    child_process.exec("open http://localhost:" + port, () => {});
  }
}
